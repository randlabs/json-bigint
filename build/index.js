(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{default:()=>n});const r=/(^|[[:,]\s*)(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)/gmu;class n{static parse(t,e,s){let o;e&&"object"==typeof e&&(s=e,e=null),o=s&&s.bnParse?s.bnParse:function(t){return BigInt(t)};const l=n.generateTag();if("string"==typeof t){const e=[];let n;const s=[];let o=0;for(let e=0;;){let r=t.indexOf('"',e);if(r<0){s.push({start:o,end:t.length});break}if(r>0&&"\\"==t.charAt(r-1))e=r+1;else{s.push({start:o,end:r});do{e=r+1,r=t.indexOf('"',e)}while(r>0&&"\\"==t.charAt(r-1));if(r<0)break;e=r+1,o=e}}for(const o of s){const s=t.substring(o.start,o.end);for(r.lastIndex=0;null!==(n=r.exec(s));){const t=parseInt(n[2],10);Number.isNaN(t)||t>=Number.MIN_SAFE_INTEGER&&t<=Number.MAX_SAFE_INTEGER||e.push({ofs:o.start+n.index+n[1].length,len:n[2].length,repl:n[2]})}}let i=e.length;for(;i>0;){i-=1;const r='{ "'+l+'": "'+e[i].repl+'" }';t=t.substr(0,e[i].ofs)+r+t.substr(e[i].ofs+e[i].len)}}let i=JSON.parse(t,e||void 0);const a=n.convertTaggedBigNumbers(i,l,o);return a&&(i=a),i}static stringify(t,e,r,s){e&&"object"==typeof e?(s=e,e=null,r=null):r&&"object"==typeof r&&(s=r,r=null);const o=n.generateTag();t=n.shallowCopyAndTagBigNumbers(t,o,s?s.bnStringify:null);let l=JSON.stringify(t,e||void 0,r||void 0);const i='"'+o,a=o+'"';let u=0;for(;;){const t=l.indexOf(i,u);if(t<0)break;const e=t+i.length,r=l.indexOf(a,e);if(r<0)break;l=l.substr(0,t)+l.substr(e,r-e)+l.substr(r+a.length),u=t+(r-e)}return l}static generateTag(){return"tag"+Date.now().toString()+Math.floor(1e5*Math.random()).toString()}static convertTaggedBigNumbers(t,e,r){if(null!=t&&"object"==typeof t){const s=Object.keys(t);if(1==s.length&&s[0]==e)return r(t[e]);for(let o=0;o<s.length;o++){const l=n.convertTaggedBigNumbers(t[s[o]],e,r);null!=l&&(t[s[o]]=l)}}return null}static shallowCopyAndTagBigNumbers(t,e,r){if(r){const n=r(t);if("string"==typeof n)return e+n+e}if("bigint"==typeof t)return e+t.toString()+e;if(null!=t&&"object"==typeof t){const s=Object.keys(t),o=Array.isArray(t)?[]:{};for(let l=0;l<s.length;l++)o[s[l]]=n.shallowCopyAndTagBigNumbers(t[s[l]],e,r);return o}return t}}module.exports=e.default})();
//# sourceMappingURL=index.js.map